

///Functions

pub fn creat(ctx: Contexts<newaccountcontext>) -> result<()>{
let newaccountdeposit: &mut Account<newaccountdeposit> = ctx.accounts.newaccountdeposit;
newaccountdeposit.name = names,
newaccountdeposit.pubkey = owner,
newaccountdeposit.userdeposit = usersdeposit

}

////Contexts

pub struct newaccountcontext <'info> {

    #[account(init, payer = user, space = 8)]
    pub newaccount: Accounts<'info, newaccountdeposit>,
    pub user: signer<'info>,
    pub system_program: system_program<'info, system>

}

////Accounts

#[account]

pub struct newaccountdeposit {

    pub name : u64,
    pub userdeposit : Vec<userdeposit>,
    pub owner : pubkey


}









////Forms

//pub VariableName: Accounts<'info, NewVariableName>, decaring in context

//let lottery: &mut Account<Lottery> = &mut ctx.accounts.lottery; declaring and assigning in functions
